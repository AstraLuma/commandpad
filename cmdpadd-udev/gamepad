#!/usr/bin/python -O
"""
An alternative filter, for my Saitek gamepad.
"""
from __future__ import division
import uinput, udev, sys, array, devfilter, threading
from devfilter import DevFilter, main
from time import clock

### INPUTS ###
# Buttons
BTN1, BTN2, BTN3, BTN4, BTN5, BTN6, BTN7, BTN8, BTN_BLACK, BTN_SILVER, BTN_FPS, BTN_ANALOG = range(uinput.BTN_TRIGGER, uinput.BTN_BASE6+1)
# Axes
LEFT_X, LEFT_Y = uinput.ABS_X, uinput.ABS_Y
RIGHT_X, RIGHT_Y = uinput.ABS_THROTTLE, uinput.ABS_RUDDER
POV_X, POV_Y = uinput.ABS_HAT0X, uinput.ABS_HAT0Y

### OUTPUTS ###
KEY_UP, KEY_LEFT, KEY_DOWN, KEY_RIGHT = uinput.KEY_W, uinput.KEY_A, uinput.KEY_S, uinput.KEY_D
KEY_JUMP, KEY_CROUCH = uinput.KEY_LEFTSHIFT, uinput.KEY_LEFTCTRL
KEY_FIRE1, KEY_FIRE2 = uinput.KEY_O, uinput.KEY_P
KEY_ZOOM = uinput.KEY_L
KEY_WEAPON_PREV, KEY_WEAPON_NEXT = uinput.KEY_LEFTBRACE, uinput.KEY_RIGHTBRACE
KEY_HOOK = uinput.KEY_E
MOUSE_X, MOUSE_Y = uinput.REL_X, uinput.REL_Y

EVENT_TYPE_NAMES = {
	uinput.EV_KEY : 'KEY',
	uinput.EV_ABS : 'ABS',
	uinput.EV_REL : 'REL',
	uinput.EV_REP : 'REP',
}

EVENT_CODE_NAMES = {
	uinput.EV_KEY : {
		BTN1 : 'BTN1', 
		BTN2 : 'BTN2', 
		BTN3 : 'BTN3', 
		BTN4 : 'BTN4', 
		BTN5 : 'BTN5', 
		BTN6 : 'BTN6', 
		BTN7 : 'BTN7', 
		BTN8 : 'BTN8', 
		BTN_BLACK : 'BTN_BLACK', 
		BTN_SILVER : 'BTN_SILVER', 
		BTN_FPS : 'BTN_FPS', 
		BTN_ANALOG : 'BTN_ANALOG',
		KEY_UP : 'kUp', 
		KEY_LEFT : 'kLeft', 
		KEY_DOWN : 'kDown', 
		KEY_RIGHT : 'kRight',
		KEY_JUMP : 'kJump',
		KEY_CROUCH : 'kCrouch',
		KEY_FIRE1 : 'kFire1',
		KEY_FIRE2 : 'kFire2',
		KEY_ZOOM : 'kZoom',
		KEY_WEAPON_PREV : 'kNextWeapon', 
		KEY_WEAPON_NEXT : 'kPrevWeapon',
		KEY_HOOK : 'kHook',
		},
	uinput.EV_ABS : {
		LEFT_X : 'XL', 
		LEFT_Y : 'YL', 
		RIGHT_X : 'XR', 
		RIGHT_Y : 'YR', 
		POV_X : 'XHat', 
		POV_Y : 'YHat', 
		},
	uinput.EV_REL : {
		MOUSE_X : 'XMouse', 
		MOUSE_Y : 'YMouse', 
		},
	}

def formatEvent(ev):
	try:
		t = ev.type
		if t in EVENT_TYPE_NAMES:
			t = EVENT_TYPE_NAMES[t]
		c = ev.code
		if ev.type in EVENT_CODE_NAMES:
			cd = EVENT_CODE_NAMES[ev.type]
			if c in cd:
				c = cd[c]
		return "[%i.%06i] %s %s %r" % (ev.time.tv_sec, ev.time.tv_usec, t, c, ev.value)
	except:
		return repr(ev)

KEY_MAPS = {
	BTN1 : KEY_JUMP,
	BTN2 : KEY_CROUCH,
	BTN3 : KEY_HOOK,
	BTN5 : KEY_FIRE2,
	BTN6 : KEY_FIRE1,
	BTN7 : KEY_WEAPON_PREV, 
	BTN8 : KEY_WEAPON_NEXT,
	BTN_SILVER : KEY_ZOOM,
	}

VIEW_MAPS = {
	RIGHT_X : MOUSE_X,
	RIGHT_Y : MOUSE_Y,
}

# mouse units per second the mouse should move
MOUSE_RATE = 10

def mapEvent(d, ev):
	if ev.code in d:
		v = d[ev.code]
		if callable(v):
			return v(ev)
		else:
			return udev.input_event(ev.time, ev.type, v, ev.value)

def scale(value, min, max):
	"""
	Scales to -1->1
	"""
	return (value - min) / (max - min) * 2 - 1

def unscale(value, min, max):
	"""
	Scales from -1->1
	"""
	return ((value + 1) / 2 + min) * (max - min)

class AnalogRepeat(object):
	def __init__(self, type, code, value):
		print "timer: go", type, code, value
		self._type = type
		self._code = code
		self._value = value
		self._period = 0.1 #10hz
		self._last = None
		threading.Timer(self._period, self).start()
	def __call__(self):
		nt = clock()
		print "timer:nt:", nt
		if self._value == 0: return
		if self._last == None:
			self._last = nt
			return
		dt = nt - self._last
		dev = devfilter.getodev()
		print "timer:value:",self._value * dt
		dev.write(udev.input_event(time=udev.timeval(nt), type=self._type, code=self._code, value=self._value * dt))
		dev.write(udev.input_event(type=uinput.EV_SYN))
		self._last = nt
		threading.Timer(self._period, self).start()
		sys.stdout.flush()

class KeyRepeat(object):
	# Has to use a square-wave-type method
	def __init__(self, type, pos, neg, value):
		self._type = type
		self._codes = [pos, neg]
		self._value = value
		self._maxperiod = 0.1 #10hz
		self._last = None
		threading.Timer(self._period, self).start()
	def down(self):
		nt = clock()
		print "timer:nt:", nt
		if self._value == 0: return
		if self._last == None:
			self._last = nt
			return
		dt = nt - self._last
		dev = devfilter.getodev()
		print "timer:value:",self._value * dt
		dev.write(udev.input_event(time=udev.timeval(nt), type=self._type, code=self._code, value=self._value * dt))
		dev.write(udev.input_event(type=uinput.EV_SYN))
		self._last = nt
		threading.Timer(self._period, self).start()
	def up(self):
		

@DevFilter("Saitek Magic Bus", 0x06A3, 0x5F0D, 0x0110,
	KEY=[
	     # Our mappings
	     KEY_UP, KEY_LEFT, KEY_DOWN, KEY_RIGHT, 
	     KEY_JUMP, KEY_CROUCH, KEY_FIRE1, KEY_FIRE2, KEY_ZOOM,
	     KEY_WEAPON_PREV, KEY_WEAPON_NEXT, KEY_HOOK,
	     # Mice
	     uinput.BTN_LEFT, uinput.BTN_RIGHT,
	     ],
	#ABS=[LEFT_X, LEFT_Y, RIGHT_X, RIGHT_Y, POV_X, POV_Y],
	#Mice
	REL=[MOUSE_X, MOUSE_Y, uinput.REL_WHEEL],
	SYN=[],
	)
def JoyFilter():
		fps_mode = False
		event = yield
		axis_state = {}
		axis_range = devfilter.getidev().dev_ranges()
		axis_timer = {}
		while event is not None:
			nev = None
			if event.type == 0 and event.code == 0 and event.value == 0:
				event = yield
				continue
			if event.type == uinput.EV_KEY and event.code == BTN_FPS:
				if event.value:
					fps_mode = not fps_mode
					print "FPS mode:", "on" if fps_mode else "off"
			elif event.type == uinput.EV_KEY and event.code == BTN_ANALOG:
				if event.value:
					print "Analog button"
			elif fps_mode:
				orig_event = udev.input_event(event.time, event.type, event.code, event.value)
				if event.type == uinput.EV_KEY:
					nev = mapEvent(KEY_MAPS, event)
				elif event.type == uinput.EV_ABS:
					nev = mapEvent(VIEW_MAPS, event)
					if nev is not None:
						nev.type = uinput.EV_REL
						tm = float(event.time)
						if event.code not in axis_state:
							nev = None
						else:
							ot, oval = axis_state[event.code]
							ov = scale(oval, axis_range[event.code][1], axis_range[event.code][2])
							print "ov:", ov
							if nev.code in axis_timer:
								axis_timer[nev.code]._value = ov * MOUSE_RATE
							else:
								axis_timer[nev.code] = AnalogRepeat(nev.type, nev.code, ov * MOUSE_RATE)
							nev = None
						axis_state[event.code] = tm, event.value
				print "\t",formatEvent(orig_event), "->", formatEvent(nev)
			else:
				# Skip plain joystick events, software is quite capable of reading them
				pass
				# But update axis_state
				if event.type == uinput.EV_ABS:
					axis_state[event.code] = float(event.time), event.value
			event = yield nev

main(JoyFilter, '/dev/input/event8', udev.FindUinput())

